<html>
  <head>
    <title>Mapa de Pontos de Coleta</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <style>
      body {
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
      }
      #map { 
        height: 100vh; 
        width: 70%; 
        float: left;
      }
      .sidebar {
        width: 30%;
        height: 100vh;
        float: right;
        background: #f8f9fa;
        padding: 20px;
        box-sizing: border-box;
        overflow-y: auto;
      }
      .container-form {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
      }
      .lista-pontos {
        margin-top: 20px;
      }
      .ponto-item {
        background: white;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        cursor: pointer;
        transition: all 0.3s ease;
      }
      .ponto-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      }
      .ponto-item h4 {
        margin: 0 0 10px 0;
        color: #28a745;
      }
      .ponto-item p {
        margin: 5px 0;
        color: #666;
      }
      .material-tag {
        display: inline-block;
        padding: 3px 8px;
        background: #28a745;
        color: white;
        border-radius: 12px;
        font-size: 12px;
        margin-top: 5px;
      }
      input, select {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
      }
      button {
        width: 100%;
        padding: 10px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }
      button:hover {
        background-color: #218838;
      }
      .filtros {
        margin-bottom: 20px;
      }
      .filtros select {
        margin-bottom: 10px;
      }
      .btn-excluir {
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
        width: auto;
      }
      .btn-excluir:hover {
        background-color: #c82333;
      }
      .btn-voltar {
        position: absolute;
        top: 20px;
        left: 20px;
        z-index: 1000;
        background-color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 5px;
      }
      .btn-voltar:hover {
        background-color: #f8f9fa;
      }
      .btn-voltar svg {
        width: 20px;
        height: 20px;
      }
      .search-box {
        position: absolute;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1000;
        background: white;
        padding: 10px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        display: flex;
        gap: 10px;
      }
      .search-box input {
        width: 300px;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      .search-box button {
        padding: 8px 15px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      .search-box button:hover {
        background-color: #218838;
      }
    </style>
  </head>
  <body>
    <button class="btn-voltar" onclick="window.location.href='/principal'">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M19 12H5M12 19l-7-7 7-7"/>
      </svg>
      Voltar
    </button>

    <div class="search-box">
      <input type="text" id="searchInput" placeholder="Buscar por endereço...">
      <button onclick="buscarEndereco()">Buscar</button>
    </div>

    <div id="map"></div>
    
    <div class="sidebar">
      <div class="container-form">
        <h3>Adicionar Ponto de Coleta</h3>
        <form id="formPontoColeta">
          <input type="text" id="cep" placeholder="CEP" required>
          <input type="text" id="nome" placeholder="Nome do Ponto de Coleta" required>
          <input type="text" id="endereco" placeholder="Endereço" required>
          <select id="tipoMaterial" required>
            <option value="">Selecione o tipo de material</option>
            <option value="papel">Papel</option>
            <option value="plastico">Plástico</option>
            <option value="vidro">Vidro</option>
            <option value="metal">Metal</option>
            <option value="eletronicos">Eletrônicos</option>
          </select>
          <button type="submit">Adicionar Ponto de Coleta</button>
        </form>
      </div>

      <div class="filtros">
        <h3>Filtrar Pontos</h3>
        <select id="filtroMaterial">
          <option value="">Todos os materiais</option>
          <option value="papel">Papel</option>
          <option value="plastico">Plástico</option>
          <option value="vidro">Vidro</option>
          <option value="metal">Metal</option>
          <option value="eletronicos">Eletrônicos</option>
        </select>
      </div>

      <div class="lista-pontos">
        <h3>Pontos de Coleta</h3>
        <div id="listaPontos"></div>
      </div>
    </div>

    <script>
      // Inicialização do mapa
      var map = L.map('map').setView([-15.7942, -47.8822], 12);
      var markers = L.layerGroup().addTo(map);
      var markersList = {};
      var pontosDeColeta = [];

      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);

      // Função para adicionar marcador no mapa
      function adicionarMarcador(lat, lng, info, id) {
        const marker = L.marker([lat, lng]).addTo(map);
        marker.bindPopup(info);
        markersList[id] = marker;
        return marker;
      }

      // Função para atualizar a lista de pontos
      function atualizarListaPontos(pontos) {
        const listaPontos = document.getElementById('listaPontos');
        listaPontos.innerHTML = '';
        
        pontos.forEach((ponto) => {
          const pontoElement = document.createElement('div');
          pontoElement.className = 'ponto-item';
          pontoElement.innerHTML = `
            <h4>${ponto.nome}</h4>
            <p><strong>Endereço:</strong> ${ponto.endereco}</p>
            <p><strong>CEP:</strong> ${ponto.cep}</p>
            <span class="material-tag">${ponto.tipo_material}</span>
            <button onclick="excluirPonto(${ponto.id})" class="btn-excluir">Excluir</button>
          `;
          
          pontoElement.addEventListener('click', (e) => {
            if (!e.target.classList.contains('btn-excluir')) {
              map.setView([ponto.latitude, ponto.longitude], 15);
              markersList[ponto.id].openPopup();
            }
          });
          
          listaPontos.appendChild(pontoElement);
        });
      }

      // Função para buscar coordenadas pelo CEP
      async function buscarCoordenadasPorCEP(cep) {
        const apiKey = '3a2a3e1764574c0891c0c4d4d88938ee';
        try {
          const response = await fetch(`https://api.opencagedata.com/geocode/v1/json?q=${cep}&key=${apiKey}`);
          const data = await response.json();
          if (data.results && data.results.length > 0) {
            return data.results[0].geometry;
          }
          throw new Error('CEP não encontrado');
        } catch (error) {
          console.error('Erro ao buscar coordenadas:', error);
          throw error;
        }
      }

      // Função para excluir ponto de coleta
      async function excluirPonto(id) {
        if (!confirm('Tem certeza que deseja excluir este ponto de coleta?')) {
          return;
        }

        try {
          const response = await fetch(`/api/pontos-coleta/${id}`, {
            method: 'DELETE'
          });

          if (!response.ok) {
            throw new Error('Erro ao excluir ponto de coleta');
          }

          // Remover marcador do mapa
          if (markersList[id]) {
            map.removeLayer(markersList[id]);
            delete markersList[id];
          }

          // Recarregar pontos
          await carregarPontos();

        } catch (error) {
          console.error('Erro:', error);
          alert('Erro ao excluir ponto de coleta');
        }
      }

      // Função para carregar pontos do banco de dados
      async function carregarPontos() {
        try {
          const response = await fetch('/api/pontos-coleta');
          const pontos = await response.json();
          pontosDeColeta = pontos;

          // Limpar marcadores existentes
          Object.values(markersList).forEach(marker => map.removeLayer(marker));
          markersList = {};

          // Adicionar novos marcadores
          pontos.forEach(ponto => {
            const popupInfo = `
              <strong>${ponto.nome}</strong><br>
              Endereço: ${ponto.endereco}<br>
              Material: ${ponto.tipo_material}<br>
              CEP: ${ponto.cep}
            `;
            adicionarMarcador(ponto.latitude, ponto.longitude, popupInfo, ponto.id);
          });

          // Atualizar lista
          atualizarListaPontos(pontos);

        } catch (error) {
          console.error('Erro ao carregar pontos:', error);
          alert('Erro ao carregar pontos de coleta');
        }
      }

      // Manipulador do formulário
      document.getElementById('formPontoColeta').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const cep = document.getElementById('cep').value;
        const nome = document.getElementById('nome').value;
        const endereco = document.getElementById('endereco').value;
        const tipoMaterial = document.getElementById('tipoMaterial').value;

        try {
          const coordenadas = await buscarCoordenadasPorCEP(cep);
          
          const pontoColeta = {
            nome: nome,
            endereco: endereco,
            cep: cep,
            tipoMaterial: tipoMaterial,
            lat: coordenadas.lat,
            lng: coordenadas.lng
          };

          const response = await fetch('/api/pontos-coleta', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(pontoColeta)
          });

          if (!response.ok) {
            throw new Error('Erro ao salvar ponto de coleta');
          }

          // Recarregar pontos
          await carregarPontos();

          // Limpar formulário
          this.reset();

        } catch (error) {
          console.error('Erro:', error);
          alert('Erro ao adicionar ponto de coleta. Verifique o CEP e tente novamente.');
        }
      });

      // Filtro de materiais
      document.getElementById('filtroMaterial').addEventListener('change', function(e) {
        const materialFiltrado = e.target.value;
        const pontosFiltrados = materialFiltrado 
          ? pontosDeColeta.filter(ponto => ponto.tipo_material === materialFiltrado)
          : pontosDeColeta;
        
        atualizarListaPontos(pontosFiltrados);
      });

      // Carregar pontos ao iniciar
      window.addEventListener('load', carregarPontos);

      // Função para buscar endereço
      async function buscarEndereco() {
        const endereco = document.getElementById('searchInput').value;
        if (!endereco) return;

        try {
          const apiKey = '3a2a3e1764574c0891c0c4d4d88938ee';
          const response = await fetch(`https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(endereco)}&key=${apiKey}`);
          const data = await response.json();

          if (data.results && data.results.length > 0) {
            const { lat, lng } = data.results[0].geometry;
            map.setView([lat, lng], 15);
            
            // Adicionar marcador temporário
            const tempMarker = L.marker([lat, lng]).addTo(map);
            tempMarker.bindPopup('Localização encontrada').openPopup();
            
            // Remover marcador após 3 segundos
            setTimeout(() => {
              map.removeLayer(tempMarker);
            }, 3000);
          } else {
            alert('Endereço não encontrado');
          }
        } catch (error) {
          console.error('Erro ao buscar endereço:', error);
          alert('Erro ao buscar endereço');
        }
      }

      // Permitir busca ao pressionar Enter
      document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          buscarEndereco();
        }
      });
    </script>
  </body>
</html>